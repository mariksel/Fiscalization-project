using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using test.ServiceReference1;

namespace test
{
    public class FiscalizationService
    {
        public static string GenerateVerifyURL(RegisterInvoiceRequest rInvoice)
        {
            // This is QR Code
            string baseUrl = @"https://efiskalizimi-app-test.tatime.gov.al/invoice-check/#/verify?";

            baseUrl += "iic=" + rInvoice.Invoice.IIC + "&";

            baseUrl += "tin=" + rInvoice.Invoice.Seller.IDNum + "&";

            baseUrl += "crtd=" + GetDatetimeISO8601(rInvoice.Header.SendDateTime) + "&";

            baseUrl += "ord=" + Regex.Match(rInvoice.Invoice.InvNum, @"\A([0-9]{0,10})", RegexOptions.Singleline).Value + "&";

            baseUrl += "bu=" + rInvoice.Invoice.BusinUnitCode + "&";

            baseUrl += "cr=" + rInvoice.Invoice.TCRCode + "&";

            baseUrl += "sw=" + rInvoice.Invoice.SoftCode + "&";

            baseUrl += "prc=" + rInvoice.Invoice.TotPrice.ToString("F", CultureInfo.InvariantCulture);

            return baseUrl;
        }

        private static string GetDatetimeISO8601(DateTime date)
        {
            return date.ToString("yyyy-MM-dd'T'HH:mm:ssK", CultureInfo.InvariantCulture);
            //2019-01-24T22:00:58+01:00
            //2019-01-24T22:00:58-01:00
            //2020-04-24T23:15:51+02:00
        }

        public static DateTime GetDateTimeNow()
        {
            var date = DateTime.Now;
            date = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, DateTimeKind.Local);
            return date;
        }

        public static DateTime GenerateCustomeDateForTests()
        {
            var date = DateTime.Now;
            date = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, DateTimeKind.Local);
            date = date.AddDays(-3);
            return date;
        }

        public static DateTime GenerateToday2Years()
        {
            var date = DateTime.Now;
            date = new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, DateTimeKind.Local);
            date = date.AddDays(600);
            return date;
        }

        public static string CreateIICInput(RegisterInvoiceRequest rInvoice)
        {
            // Issuer NUIS(Chapter 3.7.1.51)
            // Date and time created(Chapter 3.7.1.8)
            // Invoice number(Chapter 3.7.1.10)
            // Business unit code(Chapter 3.7.1.21)
            // TCR code(Chapter 3.7.1.12)
            // Software code(Chapter 3.7.1.22)86 | 118
            // Total price(Chapter 3.7.1.19)

            // Issuer NUIS
            string iicInput = rInvoice.Invoice.Seller.IDNum;

            // dateTimeCreated
            iicInput += "|" + GetDatetimeISO8601(rInvoice.Invoice.IssueDateTime);

            // invoiceNumber
            iicInput += "|" + Regex.Match(rInvoice.Invoice.InvNum, @"\A([0-9]{0,10})", RegexOptions.Singleline).Value;

            // busiUnitCode
            iicInput += "|" + rInvoice.Invoice.BusinUnitCode;

            // tcrCode
            iicInput += "|" + rInvoice.Invoice.TCRCode;

            // softCode
            iicInput += "|" + rInvoice.Invoice.SoftCode;

            // totalPrice
            iicInput += "|" + rInvoice.Invoice.TotPrice;

            return iicInput;
        }

        public static string CreateIICInput(RegisterWTNRequest registerWTN)
        {
            // WTNIC is generated by concatenating following parameters of the invoice:
            // Issuer NUIS(Chapter 3.8.1.38)
            // Date and time created(Chapter 3.8.1.9)
            // WTN number(Chapter 3.8.1.13)
            // Business unit code(Chapter 3.8.1.11)
            // Software code(Chapter 3.8.1.12)

            // Issuer NUIS
            string iicInput = registerWTN.WTN.Issuer.NUIS;

            // dateTimeCreated
            iicInput += "|" + GetDatetimeISO8601(registerWTN.WTN.IssueDateTime);

            // WTN number
            iicInput += "|" + registerWTN.WTN.WTNNum;

            // busiUnitCode
            iicInput += "|" + registerWTN.WTN.BusinUnitCode;

            // softCode
            iicInput += "|" + registerWTN.WTN.SoftCode;

            return iicInput;
        }
    }
}
